// Source code is decompiled from a .class file using FernFlower decompiler.
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class BFS_8x8_Map {
   private static final int[] dx = new int[]{-1, 1, 0, 0};
   private static final int[] dy = new int[]{0, 0, -1, 1};

   public BFS_8x8_Map() {
   }

   public static void main(String[] args) {
      char[][] grid = new char[][]{{'S', '-', '-', 'X', '-', '-', '-', 'G'}, {'-', 'X', '-', 'X', '-', 'X', '-', '-'}, {'-', 'X', '-', '-', '-', 'X', 'X', '-'}, {'-', '-', '-', 'X', 'X', '-', '-', '-'}, {'X', 'X', '-', '-', '-', '-', 'X', 'X'}, {'-', '-', 'X', 'X', 'X', '-', '-', '-'}, {'-', 'X', '-', '-', '-', '-', 'X', '-'}, {'-', '-', '-', 'X', 'X', '-', '-', '-'}};
      Node start = null;
      Node goal = null;

      for(int i = 0; i < 8; ++i) {
         for(int j = 0; j < 8; ++j) {
            if (grid[i][j] == 'S') {
               start = new Node(i, j, (Node)null);
            }

            if (grid[i][j] == 'G') {
               goal = new Node(i, j, (Node)null);
            }
         }
      }

      Node result = bfs(grid, start, goal);
      if (result != null) {
         System.out.println("Path found!");
         printPath(result, grid);
      } else {
         System.out.println("No path found.");
      }

   }

   private static Node bfs(char[][] grid, Node start, Node goal) {
      Queue<Node> queue = new LinkedList();
      boolean[][] visited = new boolean[8][8];
      queue.add(start);
      visited[start.x][start.y] = true;

      while(!queue.isEmpty()) {
         Node current = (Node)queue.poll();
         if (current.x == goal.x && current.y == goal.y) {
            return current;
         }

         for(int i = 0; i < 4; ++i) {
            int nx = current.x + dx[i];
            int ny = current.y + dy[i];
            if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8 && grid[nx][ny] != 'X' && !visited[nx][ny]) {
               queue.add(new Node(nx, ny, current));
               visited[nx][ny] = true;
            }
         }
      }

      return null;
   }

   private static void printPath(Node node, char[][] grid) {
      ArrayList path;
      for(path = new ArrayList(); node != null; node = node.parent) {
         path.add(node);
      }

      Collections.reverse(path);
      Iterator var3 = path.iterator();

      while(var3.hasNext()) {
         Node n = (Node)var3.next();
         if (grid[n.x][n.y] != 'S' && grid[n.x][n.y] != 'G') {
            grid[n.x][n.y] = '*';
         }
      }

      for(int i = 0; i < 8; ++i) {
         for(int j = 0; j < 8; ++j) {
            System.out.print(grid[i][j] + " ");
         }

         System.out.println();
      }

   }
}
